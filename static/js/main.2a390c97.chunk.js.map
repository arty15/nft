{"version":3,"sources":["MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","state","onClick","a","gatekeeper","variant","CircularProgress","goLiveDate","cluster","process","REACT_APP_SOLANA_NETWORK","toString","decimals","REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS","splTokenName","REACT_APP_SPL_TOKEN_TO_MINT_NAME","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","Card","MintButtonContainer","SolExplorerLink","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BorderLinearProgress","LinearProgress","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","message","severity","undefined","alertState","setAlertState","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","wallet","useWallet","setCandyMachine","rpcUrl","rpcHost","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","connection","Connection","candyMachineId","getCandyMachineState","cndy","divider","Array","join","slice","tokenMint","toNumber","LAMPORTS_PER_SOL","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getAtaForMint","mint","getTokenAccountBalance","tokenBalance","value","uiAmount","error","endSettings","endSettingType","date","toDate","number","Date","getTime","amount","limit","Math","min","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","expireOnUse","Error","hideDuration","startsWith","displaySuccess","mintPublicKey","qty","remaining","throwConfetti","confetti","particleCount","spread","origin","y","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","status","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","setupState","anchor","Keypair","generate","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","msg","code","indexOf","getBalance","toLocaleString","elevation","label","src","alt","now","onMount","completed","onComplete","renderer","days","hours","minutes","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","seconds","href","target","Snackbar","autoHideDuration","onClose","Alert","require","REACT_APP_CANDY_MACHINE_ID","e","getCandyMachineId","network","REACT_APP_SOLANA_RPC_HOST","clusterApiUrl","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","isWhitelistOnly","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","all","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.2a390c97.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\r\nimport {CandyMachineAccount} from './candy-machine';\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  display: block !important;\r\n  margin: 0 auto !important;\r\n  background-color: var(--title-text-color) !important;\r\n  min-width: 120px !important;\r\n  font-size: 1em !important;\r\n`;\r\n\r\nexport const MintButton = ({\r\n                               onMint,\r\n                               candyMachine,\r\n                               isMinting,\r\n                               isEnded,\r\n                               isActive,\r\n                               isSoldOut\r\n                           }: {\r\n    onMint: () => Promise<void>;\r\n    candyMachine?: CandyMachineAccount;\r\n    isMinting: boolean;\r\n    isEnded: boolean;\r\n    isActive: boolean;\r\n    isSoldOut: boolean;\r\n}) => {\r\n    const {requestGatewayToken, gatewayStatus} = useGateway();\r\n    const [clicked, setClicked] = useState(false);\r\n    const [isVerifying, setIsVerifying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsVerifying(false);\r\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\r\n            // when user approves wallet verification txn\r\n            setIsVerifying(true);\r\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n            console.log('Verified human, now minting...');\r\n            onMint();\r\n            setClicked(false);\r\n        }\r\n    }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n    return (\r\n        <CTAButton\r\n            disabled={\r\n                clicked ||\r\n                candyMachine?.state.isSoldOut ||\r\n                isSoldOut ||\r\n                isMinting ||\r\n                isEnded ||\r\n                !isActive ||\r\n                isVerifying\r\n            }\r\n            onClick={async () => {\r\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\r\n                    console.log('Requesting gateway token');\r\n                    setClicked(true);\r\n                    await requestGatewayToken();\r\n                } else {\r\n                    console.log('Minting...');\r\n                    await onMint();\r\n                }\r\n            }}\r\n            variant=\"contained\"\r\n        >\r\n            {!candyMachine ? (\r\n                \"CONNECTING...\"\r\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\r\n                'SOLD OUT'\r\n            ) : isActive ? (\r\n                isVerifying ? 'VERIFYING...' :\r\n                    isMinting || clicked ? (\r\n                        <CircularProgress/>\r\n                    ) : (\r\n                        \"MINT\"\r\n                    )\r\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\r\n                \"SOON\"\r\n            ) : (\r\n                \"UNAVAILABLE\"\r\n            ))}\r\n        </CTAButton>\r\n    );\r\n};\r\n","import {useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport {\r\n    Commitment,\r\n    Connection,\r\n    PublicKey,\r\n    Transaction,\r\n    LAMPORTS_PER_SOL\r\n} from \"@solana/web3.js\";\r\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\r\nimport {useWallet} from \"@solana/wallet-adapter-react\";\r\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\r\nimport {GatewayProvider} from '@civic/solana-gateway-react';\r\nimport Countdown from \"react-countdown\";\r\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport {AlertState, getAtaForMint, toDate} from './utils';\r\nimport {MintButton} from './MintButton';\r\nimport {\r\n    awaitTransactionSignatureConfirmation,\r\n    CANDY_MACHINE_PROGRAM,\r\n    CandyMachineAccount,\r\n    createAccountsForMint,\r\n    getCandyMachineState,\r\n    getCollectionPDA,\r\n    mintOneToken,\r\n    SetupState,\r\n} from \"./candy-machine\";\r\n\r\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\r\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\r\n\r\nconst WalletContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: right;\r\n`;\r\n\r\nconst WalletAmount = styled.div`\r\n  color: black;\r\n  width: auto;\r\n  padding: 5px 5px 5px 16px;\r\n  min-width: 48px;\r\n  min-height: auto;\r\n  border-radius: 22px;\r\n  background-color: var(--main-text-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  box-sizing: border-box;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-weight: 500;\r\n  line-height: 1.75;\r\n  text-transform: uppercase;\r\n  border: 0;\r\n  margin: 0;\r\n  display: inline-flex;\r\n  outline: 0;\r\n  position: relative;\r\n  align-items: center;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  justify-content: flex-start;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Wallet = styled.ul`\r\n  flex: 0 0 auto;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst ConnectButton = styled(WalletMultiButton)`\r\n  border-radius: 18px !important;\r\n  padding: 6px 16px;\r\n  background-color: #4E44CE;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst NFT = styled(Paper)`\r\n  min-width: 500px;\r\n  margin: 0 auto;\r\n  padding: 5px 20px 20px 20px;\r\n  flex: 1 1 auto;\r\n  background-color: var(--card-background-color) !important;\r\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22) !important;\r\n`;\r\n\r\nconst Card = styled(Paper)`\r\n  display: inline-block;\r\n  background-color: var(--countdown-background-color) !important;\r\n  margin: 5px;\r\n  min-width: 40px;\r\n  padding: 24px;\r\n\r\n  h1 {\r\n    margin: 0px;\r\n  }\r\n`;\r\n\r\nconst MintButtonContainer = styled.div`\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\r\n    color: #464646;\r\n  }\r\n\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\r\n    -webkit-animation: pulse 1s;\r\n    animation: pulse 1s;\r\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\r\n  }\r\n\r\n  @-webkit-keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n\r\n  @keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n`;\r\n\r\nconst SolExplorerLink = styled.a`\r\n  color: var(--title-text-color);\r\n  border-bottom: 1px solid var(--title-text-color);\r\n  font-weight: bold;\r\n  list-style-image: none;\r\n  list-style-position: outside;\r\n  list-style-type: none;\r\n  outline: none;\r\n  text-decoration: none;\r\n  text-size-adjust: 100%;\r\n\r\n  :hover {\r\n    border-bottom: 2px solid var(--title-text-color);\r\n  }\r\n`;\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  margin-right: 4%;\r\n  margin-left: 4%;\r\n  text-align: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1 1 auto;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n`;\r\n\r\nconst DesContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 1 auto;\r\n  gap: 20px;\r\n`;\r\n\r\nconst Price = styled(Chip)`\r\n  position: absolute;\r\n  margin: 5px;\r\n  font-weight: bold;\r\n  font-size: 1.2em !important;\r\n  font-family: 'Patrick Hand', cursive !important;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  height: 400px;\r\n  width: auto;\r\n  border-radius: 7px;\r\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)`\r\n  margin: 20px;\r\n  height: 10px !important;\r\n  border-radius: 30px;\r\n  border: 2px solid white;\r\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\r\n  background-color: var(--main-text-color) !important;\r\n\r\n  > div.MuiLinearProgress-barColorPrimary {\r\n    background-color: var(--title-text-color) !important;\r\n  }\r\n\r\n  > div.MuiLinearProgress-bar1Determinate {\r\n    border-radius: 30px !important;\r\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\r\n  }\r\n`;\r\n\r\nexport interface HomeProps {\r\n    candyMachineId?: anchor.web3.PublicKey;\r\n    connection: anchor.web3.Connection;\r\n    txTimeout: number;\r\n    rpcHost: string;\r\n    network: WalletAdapterNetwork;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n    const [balance, setBalance] = useState<number>();\r\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\r\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n    const [itemsAvailable, setItemsAvailable] = useState(0);\r\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n    const [itemsRemaining, setItemsRemaining] = useState(0);\r\n    const [isSoldOut, setIsSoldOut] = useState(false);\r\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n    const [price, setPrice] = useState(0);\r\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n    const [isBurnToken, setIsBurnToken] = useState(false);\r\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n    const [isEnded, setIsEnded] = useState(false);\r\n    const [endDate, setEndDate] = useState<Date>();\r\n    const [isPresale, setIsPresale] = useState(false);\r\n    const [isWLOnly, setIsWLOnly] = useState(false);\r\n\r\n    const [alertState, setAlertState] = useState<AlertState>({\r\n        open: false,\r\n        message: \"\",\r\n        severity: undefined,\r\n    });\r\n\r\n    const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n    const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n    const wallet = useWallet();\r\n    const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n\r\n    const rpcUrl = props.rpcHost;\r\n    const solFeesEstimation = 0.012; // approx of account creation fees\r\n\r\n    const anchorWallet = useMemo(() => {\r\n        if (\r\n            !wallet ||\r\n            !wallet.publicKey ||\r\n            !wallet.signAllTransactions ||\r\n            !wallet.signTransaction\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            publicKey: wallet.publicKey,\r\n            signAllTransactions: wallet.signAllTransactions,\r\n            signTransaction: wallet.signTransaction,\r\n        } as anchor.Wallet;\r\n    }, [wallet]);\r\n\r\n    const refreshCandyMachineState = useCallback(\r\n        async (commitment: Commitment = 'confirmed') => {\r\n            if (!anchorWallet) {\r\n                return;\r\n            }\r\n\r\n            const connection = new Connection(props.rpcHost, commitment);\r\n\r\n            if (props.candyMachineId) {\r\n                try {\r\n                    const cndy = await getCandyMachineState(\r\n                        anchorWallet,\r\n                        props.candyMachineId,\r\n                        connection,\r\n                    );\r\n\r\n                    setCandyMachine(cndy);\r\n                    setItemsAvailable(cndy.state.itemsAvailable);\r\n                    setItemsRemaining(cndy.state.itemsRemaining);\r\n                    setItemsRedeemed(cndy.state.itemsRedeemed);\r\n\r\n                    var divider = 1;\r\n                    if (decimals) {\r\n                        divider = +('1' + new Array(decimals).join('0').slice() + '0');\r\n                    }\r\n\r\n                    // detect if using spl-token to mint\r\n                    if (cndy.state.tokenMint) {\r\n                        setPayWithSplToken(true);\r\n                        // Customize your SPL-TOKEN Label HERE\r\n                        // TODO: get spl-token metadata name\r\n                        setPriceLabel(splTokenName);\r\n                        setPrice(cndy.state.price.toNumber() / divider);\r\n                        setWhitelistPrice(cndy.state.price.toNumber() / divider);\r\n                    } else {\r\n                        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n                        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n                    }\r\n\r\n\r\n                    // fetch whitelist token balance\r\n                    if (cndy.state.whitelistMintSettings) {\r\n                        setWhitelistEnabled(true);\r\n                        setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\r\n                        setIsPresale(cndy.state.whitelistMintSettings.presale);\r\n                        setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\r\n\r\n                        if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\r\n                            if (cndy.state.tokenMint) {\r\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\r\n                            } else {\r\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\r\n                            }\r\n                        }\r\n\r\n                        let balance = 0;\r\n                        try {\r\n                            const tokenBalance =\r\n                                await props.connection.getTokenAccountBalance(\r\n                                    (\r\n                                        await getAtaForMint(\r\n                                            cndy.state.whitelistMintSettings.mint,\r\n                                            anchorWallet.publicKey,\r\n                                        )\r\n                                    )[0],\r\n                                );\r\n\r\n                            balance = tokenBalance?.value?.uiAmount || 0;\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                            balance = 0;\r\n                        }\r\n                        if (commitment !== \"processed\") {\r\n                            setWhitelistTokenBalance(balance);\r\n                        }\r\n                        setIsActive(isPresale && !isEnded && balance > 0);\r\n\r\n                    } else {\r\n                        setWhitelistEnabled(false);\r\n                    }\r\n\r\n                    // end the mint when date is reached\r\n                    if (cndy?.state.endSettings?.endSettingType.date) {\r\n                        setEndDate(toDate(cndy.state.endSettings.number));\r\n                        if (\r\n                            cndy.state.endSettings.number.toNumber() <\r\n                            new Date().getTime() / 1000\r\n                        ) {\r\n                            setIsEnded(true);\r\n                            setIsActive(false);\r\n                        }\r\n                    }\r\n                    // end the mint when amount is reached\r\n                    if (cndy?.state.endSettings?.endSettingType.amount) {\r\n                        let limit = Math.min(\r\n                            cndy.state.endSettings.number.toNumber(),\r\n                            cndy.state.itemsAvailable,\r\n                        );\r\n                        setItemsAvailable(limit);\r\n                        if (cndy.state.itemsRedeemed < limit) {\r\n                            setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n                        } else {\r\n                            setItemsRemaining(0);\r\n                            cndy.state.isSoldOut = true;\r\n                            setIsEnded(true);\r\n                        }\r\n                    } else {\r\n                        setItemsRemaining(cndy.state.itemsRemaining);\r\n                    }\r\n\r\n                    if (cndy.state.isSoldOut) {\r\n                        setIsActive(false);\r\n                    }\r\n\r\n                    const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n                    const collectionPDAAccount = await connection.getAccountInfo(\r\n                        collectionPDA,\r\n                    );\r\n\r\n                    const txnEstimate =\r\n                        892 +\r\n                        (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n                        (cndy.state.tokenMint ? 66 : 0) +\r\n                        (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n                        (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n                        (cndy.state.gatekeeper ? 33 : 0) +\r\n                        (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n                    setNeedTxnSplit(txnEstimate > 1230);\r\n                } catch (e) {\r\n                    if (e instanceof Error) {\r\n                        if (\r\n                            e.message === `Account does not exist ${props.candyMachineId}`\r\n                        ) {\r\n                            setAlertState({\r\n                                open: true,\r\n                                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n                                severity: 'error',\r\n                                hideDuration: null,\r\n                            });\r\n                        } else if (\r\n                            e.message.startsWith('failed to get info about account')\r\n                        ) {\r\n                            setAlertState({\r\n                                open: true,\r\n                                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                                severity: 'error',\r\n                                hideDuration: null,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        setAlertState({\r\n                            open: true,\r\n                            message: `${e}`,\r\n                            severity: 'error',\r\n                            hideDuration: null,\r\n                        });\r\n                    }\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setAlertState({\r\n                    open: true,\r\n                    message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n                    severity: 'error',\r\n                    hideDuration: null,\r\n                });\r\n            }\r\n        },\r\n        [anchorWallet, props.candyMachineId, props.rpcHost, isEnded, isPresale, props.connection],\r\n    );\r\n\r\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\r\n        return (\r\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\r\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\r\n                <h1>{seconds}</h1>Secs</Card></div>\r\n        );\r\n    };\r\n\r\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\r\n        let label = \"\";\r\n        if (days > 0) {\r\n            label += days + \" days \"\r\n        }\r\n        if (hours > 0) {\r\n            label += hours + \" hours \"\r\n        }\r\n        label += (minutes + 1) + \" minutes left to MINT.\"\r\n        return (\r\n            <div><h3>{label}</h3></div>\r\n        );\r\n    };\r\n\r\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\r\n        let remaining = itemsRemaining - qty;\r\n        setItemsRemaining(remaining);\r\n        setIsSoldOut(remaining === 0);\r\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\r\n            let balance = whitelistTokenBalance - qty;\r\n            setWhitelistTokenBalance(balance);\r\n            setIsActive(isPresale && !isEnded && balance > 0);\r\n        }\r\n        setSetupTxn(undefined);\r\n        setItemsRedeemed(itemsRedeemed + qty);\r\n        if (!payWithSplToken && balance && balance > 0) {\r\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\r\n        }\r\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\r\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\r\n            : (\"https://solscan.io/token/\" + mintPublicKey));\r\n        setIsMinting(false);\r\n        throwConfetti();\r\n    };\r\n\r\n    function throwConfetti(): void {\r\n        confetti({\r\n            particleCount: 400,\r\n            spread: 70,\r\n            origin: {y: 0.6},\r\n        });\r\n    }\r\n\r\n    const onMint = async (\r\n        beforeTransactions: Transaction[] = [],\r\n        afterTransactions: Transaction[] = [],\r\n    ) => {\r\n        try {\r\n            if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n                setIsMinting(true);\r\n                let setupMint: SetupState | undefined;\r\n                if (needTxnSplit && setupTxn === undefined) {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message: 'Please validate account setup transaction',\r\n                        severity: 'info',\r\n                    });\r\n                    setupMint = await createAccountsForMint(\r\n                        candyMachine,\r\n                        wallet.publicKey,\r\n                    );\r\n                    let status: any = {err: true};\r\n                    if (setupMint.transaction) {\r\n                        status = await awaitTransactionSignatureConfirmation(\r\n                            setupMint.transaction,\r\n                            props.txTimeout,\r\n                            props.connection,\r\n                            true,\r\n                        );\r\n                    }\r\n                    if (status && !status.err) {\r\n                        setSetupTxn(setupMint);\r\n                        setAlertState({\r\n                            open: true,\r\n                            message:\r\n                                'Setup transaction succeeded! You can now validate mint transaction',\r\n                            severity: 'info',\r\n                        });\r\n                    } else {\r\n                        setAlertState({\r\n                            open: true,\r\n                            message: 'Mint failed! Please try again!',\r\n                            severity: 'error',\r\n                        });\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                const setupState = setupMint ?? setupTxn;\r\n                const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n                let mintResult = await mintOneToken(\r\n                    candyMachine,\r\n                    wallet.publicKey,\r\n                    mint,\r\n                    beforeTransactions,\r\n                    afterTransactions,\r\n                    setupState,\r\n                );\r\n\r\n                let status: any = {err: true};\r\n                let metadataStatus = null;\r\n                if (mintResult) {\r\n                    status = await awaitTransactionSignatureConfirmation(\r\n                        mintResult.mintTxId,\r\n                        props.txTimeout,\r\n                        props.connection,\r\n                        true,\r\n                    );\r\n\r\n                    metadataStatus =\r\n                        await candyMachine.program.provider.connection.getAccountInfo(\r\n                            mintResult.metadataKey,\r\n                            'processed',\r\n                        );\r\n                    console.log('Metadata status: ', !!metadataStatus);\r\n                }\r\n\r\n                if (status && !status.err && metadataStatus) {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message: 'Congratulations! Mint succeeded!',\r\n                        severity: 'success',\r\n                    });\r\n\r\n                    // update front-end amounts\r\n                    displaySuccess(mint.publicKey);\r\n                    refreshCandyMachineState('processed');\r\n                } else if (status && !status.err) {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message:\r\n                            'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\r\n                        severity: 'error',\r\n                        hideDuration: 8000,\r\n                    });\r\n                    refreshCandyMachineState();\r\n                } else {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message: 'Mint failed! Please try again!',\r\n                        severity: 'error',\r\n                    });\r\n                    refreshCandyMachineState();\r\n                }\r\n            }\r\n        } catch (error: any) {\r\n            let message = error.msg || 'Minting failed! Please try again!';\r\n            if (!error.msg) {\r\n                if (!error.message) {\r\n                    message = 'Transaction Timeout! Please try again.';\r\n                } else if (error.message.indexOf('0x138')) {\r\n                } else if (error.message.indexOf('0x137')) {\r\n                    message = `SOLD OUT!`;\r\n                } else if (error.message.indexOf('0x135')) {\r\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\r\n                }\r\n            } else {\r\n                if (error.code === 311) {\r\n                    message = `SOLD OUT!`;\r\n                } else if (error.code === 312) {\r\n                    message = `Minting period hasn't started yet.`;\r\n                }\r\n            }\r\n\r\n            setAlertState({\r\n                open: true,\r\n                message,\r\n                severity: \"error\",\r\n            });\r\n        } finally {\r\n            setIsMinting(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (anchorWallet) {\r\n                const balance = await props.connection.getBalance(anchorWallet!.publicKey);\r\n                setBalance(balance / LAMPORTS_PER_SOL);\r\n            }\r\n        })();\r\n    }, [anchorWallet, props.connection]);\r\n\r\n    useEffect(() => {\r\n        refreshCandyMachineState();\r\n    }, [\r\n        anchorWallet,\r\n        props.candyMachineId,\r\n        props.connection,\r\n        isEnded,\r\n        isPresale,\r\n        refreshCandyMachineState\r\n    ]);\r\n\r\n\r\n    return (\r\n        <main>\r\n            <MainContainer>\r\n                <WalletContainer>\r\n                    <Wallet>\r\n                        {wallet ?\r\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\r\n                            <ConnectButton>Connect Wallet</ConnectButton>}\r\n                    </Wallet>\r\n                </WalletContainer>\r\n                <br/>\r\n                <MintContainer>\r\n                    <DesContainer>\r\n                        <NFT elevation={3}>\r\n                            <h2>My NFT</h2>\r\n                            <br/>\r\n                            <div><Price\r\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\r\n                                src=\"cool-cats.gif\"\r\n                                alt=\"NFT To Mint\"/></div>\r\n                            <br/>\r\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\r\n                              <h3>You own {whitelistTokenBalance} WL\r\n                                mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\"}.</h3>}\r\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\r\n                              <h3>You are whitelisted and allowed to mint.</h3>}\r\n                            {wallet && isActive && endDate && Date.now() < endDate.getTime() &&\r\n                              <Countdown\r\n                                date={toDate(candyMachine?.state?.endSettings?.number)}\r\n                                onMount={({completed}) => completed && setIsEnded(true)}\r\n                                onComplete={() => {\r\n                                    setIsEnded(true);\r\n                                }}\r\n                                renderer={renderEndDateCounter}\r\n                              />}\r\n                            {wallet && isActive &&\r\n                              <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\r\n                            {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\r\n                                                                         value={100 - (itemsRemaining * 100 / itemsAvailable)}/>}\r\n                            <br/>\r\n                            <MintButtonContainer>\r\n                                {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? (\r\n                                    <Countdown\r\n                                        date={toDate(candyMachine?.state.goLiveDate)}\r\n                                        onMount={({completed}) => completed && setIsActive(!isEnded)}\r\n                                        onComplete={() => {\r\n                                            setIsActive(!isEnded);\r\n                                        }}\r\n                                        renderer={renderGoLiveDateCounter}\r\n                                    />) : (\r\n                                    !wallet ? (\r\n                                        <ConnectButton>Connect Wallet</ConnectButton>\r\n                                    ) : (!isWLOnly || whitelistTokenBalance > 0) ?\r\n                                        candyMachine?.state.gatekeeper &&\r\n                                        wallet.publicKey &&\r\n                                        wallet.signTransaction ? (\r\n                                            <GatewayProvider\r\n                                                wallet={{\r\n                                                    publicKey:\r\n                                                        wallet.publicKey ||\r\n                                                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                                                    //@ts-ignore\r\n                                                    signTransaction: wallet.signTransaction,\r\n                                                }}\r\n                                                // // Replace with following when added\r\n                                                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                                                gatekeeperNetwork={\r\n                                                    candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                                                } // This is the ignite (captcha) network\r\n                                                /// Don't need this for mainnet\r\n                                                clusterUrl={rpcUrl}\r\n                                                cluster={cluster}\r\n                                                options={{autoShowModal: false}}\r\n                                            >\r\n                                                <MintButton\r\n                                                    candyMachine={candyMachine}\r\n                                                    isMinting={isMinting}\r\n                                                    isActive={isActive}\r\n                                                    isEnded={isEnded}\r\n                                                    isSoldOut={isSoldOut}\r\n                                                    onMint={onMint}\r\n                                                />\r\n                                            </GatewayProvider>\r\n                                        ) : (\r\n                                            <MintButton\r\n                                                candyMachine={candyMachine}\r\n                                                isMinting={isMinting}\r\n                                                isActive={isActive}\r\n                                                isEnded={isEnded}\r\n                                                isSoldOut={isSoldOut}\r\n                                                onMint={onMint}\r\n                                            />\r\n\r\n                                        ) :\r\n                                        <h1>Mint is private.</h1>\r\n                                )}\r\n                            </MintButtonContainer>\r\n                            <br/>\r\n                            {wallet && isActive && solanaExplorerLink &&\r\n                              <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on\r\n                                Solscan</SolExplorerLink>}\r\n                        </NFT>\r\n                    </DesContainer>\r\n                </MintContainer>\r\n            </MainContainer>\r\n            <Snackbar\r\n                open={alertState.open}\r\n                autoHideDuration={6000}\r\n                onClose={() => setAlertState({...alertState, open: false})}\r\n            >\r\n                <Alert\r\n                    onClose={() => setAlertState({...alertState, open: false})}\r\n                    severity={alertState.severity}\r\n                >\r\n                    {alertState.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolflareWebWallet,\r\n    getSolletWallet,\r\n    getSolletExtensionWallet,\r\n    getSolongWallet,\r\n    getLedgerWallet,\r\n    getSafePalWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n    WalletModalProvider\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nimport \"./App.css\";\r\nimport { DEFAULT_TIMEOUT } from './connection';\r\nimport Home from \"./Home\";\r\n\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n    try {\r\n        const candyMachineId = new anchor.web3.PublicKey(\r\n            process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n        );\r\n\r\n        return candyMachineId;\r\n    } catch (e) {\r\n        console.log('Failed to construct CandyMachineId', e);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n    // Custom RPC endpoint.\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\r\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\r\n    // of wallets that your users connect to will be loaded.\r\n    const wallets = useMemo(\r\n        () => [\r\n            getPhantomWallet(),\r\n            getSlopeWallet(),\r\n            getSolflareWallet(),\r\n            getSolflareWebWallet(),\r\n            getSolletWallet({ network }),\r\n            getSolletExtensionWallet({ network }),\r\n            getSolongWallet(),\r\n            getLedgerWallet(),\r\n            getSafePalWallet(),\r\n        ],\r\n        []\r\n    );\r\n\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect={true}>\r\n            <WalletModalProvider>\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                connection={connection}\r\n                txTimeout={DEFAULT_TIMEOUT}\r\n                rpcHost={rpcHost}\r\n                network={network}\r\n              />\r\n            </WalletModalProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n    new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n    'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n    mint: anchor.web3.PublicKey,\r\n    buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n    gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n      CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n    wallet: anchor.web3.PublicKey,\r\n    gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        wallet.toBuffer(),\r\n        Buffer.from('gateway'),\r\n        Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n        gatekeeperNetwork.toBuffer(),\r\n      ],\r\n      CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n    associatedTokenAddress: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    walletAddress: anchor.web3.PublicKey,\r\n    splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport {\r\n    SystemProgram,\r\n    Transaction,\r\n    SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from '@solana/web3.js';\r\nimport { sendTransactions, SequenceType } from './connection';\r\n\r\nimport {\r\n    CIVIC,\r\n    getAtaForMint,\r\n    getNetworkExpire,\r\n    getNetworkToken,\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n    authority: anchor.web3.PublicKey;\r\n    itemsAvailable: number;\r\n    itemsRedeemed: number;\r\n    itemsRemaining: number;\r\n    treasury: anchor.web3.PublicKey;\r\n    tokenMint: null | anchor.web3.PublicKey;\r\n    isSoldOut: boolean;\r\n    isActive: boolean;\r\n    isPresale: boolean;\r\n    isWhitelistOnly: boolean;\r\n    goLiveDate: anchor.BN;\r\n    price: anchor.BN;\r\n    gatekeeper: null | {\r\n        expireOnUse: boolean;\r\n        gatekeeperNetwork: anchor.web3.PublicKey;\r\n    };\r\n    endSettings: null | {\r\n        number: anchor.BN;\r\n        endSettingType: any;\r\n    };\r\n    whitelistMintSettings: null | {\r\n        mode: any;\r\n        mint: anchor.web3.PublicKey;\r\n        presale: boolean;\r\n        discountPrice: null | anchor.BN;\r\n    };\r\n    hiddenSettings: null | {\r\n        name: string;\r\n        uri: string;\r\n        hash: Uint8Array;\r\n    };\r\n    retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n    id: anchor.web3.PublicKey;\r\n    program: anchor.Program;\r\n    state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n    txid: anchor.web3.TransactionSignature,\r\n    timeout: number,\r\n    connection: anchor.web3.Connection,\r\n    queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n    let done = false;\r\n    let status: anchor.web3.SignatureStatus | null | void = {\r\n        slot: 0,\r\n        confirmations: 0,\r\n        err: null,\r\n    };\r\n    let subId = 0;\r\n    status = await new Promise(async (resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n            console.log('Rejecting for timeout...');\r\n            reject({ timeout: true });\r\n        }, timeout);\r\n\r\n        while (!done && queryStatus) {\r\n            // eslint-disable-next-line no-loop-func\r\n            (async () => {\r\n                try {\r\n                    const signatureStatuses = await connection.getSignatureStatuses([\r\n                        txid,\r\n                    ]);\r\n                    status = signatureStatuses && signatureStatuses.value[0];\r\n                    if (!done) {\r\n                        if (!status) {\r\n                            console.log('REST null result for', txid, status);\r\n                        } else if (status.err) {\r\n                            console.log('REST error for', txid, status);\r\n                            done = true;\r\n                            reject(status.err);\r\n                        } else if (!status.confirmations) {\r\n                            console.log('REST no confirmations for', txid, status);\r\n                        } else {\r\n                            console.log('REST confirmation for', txid, status);\r\n                            done = true;\r\n                            resolve(status);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!done) {\r\n                        console.log('REST connection error: txid', txid, e);\r\n                    }\r\n                }\r\n            })();\r\n            await sleep(2000);\r\n        }\r\n    });\r\n\r\n    //@ts-ignore\r\n    if (connection._signatureSubscriptions[subId]) {\r\n        connection.removeSignatureListener(subId);\r\n    }\r\n    done = true;\r\n    console.log('Returning status', status);\r\n    return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n    associatedTokenAddress: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    walletAddress: anchor.web3.PublicKey,\r\n    splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n    const keys = [\r\n        { pubkey: payer, isSigner: true, isWritable: true },\r\n        { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n        { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n        { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n        {\r\n            pubkey: anchor.web3.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n        {\r\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    return new anchor.web3.TransactionInstruction({\r\n        keys,\r\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        data: Buffer.from([]),\r\n    });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n    anchorWallet: anchor.Wallet,\r\n    candyMachineId: anchor.web3.PublicKey,\r\n    connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n    const provider = new anchor.Provider(connection, anchorWallet, {\r\n        preflightCommitment: 'processed',\r\n    });\r\n\r\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n    return {\r\n        id: candyMachineId,\r\n        program,\r\n        state: {\r\n            authority: state.authority,\r\n            itemsAvailable,\r\n            itemsRedeemed,\r\n            itemsRemaining,\r\n            isSoldOut: itemsRemaining === 0,\r\n            isActive: false,\r\n            isPresale: false,\r\n            isWhitelistOnly: false,\r\n            goLiveDate: state.data.goLiveDate,\r\n            treasury: state.wallet,\r\n            tokenMint: state.tokenMint,\r\n            gatekeeper: state.data.gatekeeper,\r\n            endSettings: state.data.endSettings,\r\n            whitelistMintSettings: state.data.whitelistMintSettings,\r\n            hiddenSettings: state.data.hiddenSettings,\r\n            price: state.data.price,\r\n            retainAuthority: state.data.retainAuthority,\r\n        },\r\n    };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n    mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer(),\r\n                Buffer.from('edition'),\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID,\r\n        )\r\n    )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n    mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer(),\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID,\r\n        )\r\n    )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n    candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n    return await anchor.web3.PublicKey.findProgramAddress(\r\n        [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n        CANDY_MACHINE_PROGRAM,\r\n    );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n    candyMachineAddress: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n    return await anchor.web3.PublicKey.findProgramAddress(\r\n        [Buffer.from('collection'), candyMachineAddress.toBuffer()],\r\n        CANDY_MACHINE_PROGRAM,\r\n    );\r\n};\r\n\r\nexport interface CollectionData {\r\n    mint: anchor.web3.PublicKey;\r\n    candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n    mint: anchor.web3.PublicKey,\r\n    newAuthority: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer(),\r\n                Buffer.from('collection_authority'),\r\n                newAuthority.toBuffer(),\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID,\r\n        )\r\n    )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n    mint: anchor.web3.Keypair;\r\n    userTokenAccount: anchor.web3.PublicKey;\r\n    transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n    candyMachine: CandyMachineAccount,\r\n    payer: anchor.web3.PublicKey,\r\n): Promise<SetupState> => {\r\n    const mint = anchor.web3.Keypair.generate();\r\n    const userTokenAccountAddress = (\r\n        await getAtaForMint(mint.publicKey, payer)\r\n    )[0];\r\n\r\n    const signers: anchor.web3.Keypair[] = [mint];\r\n    const instructions = [\r\n        anchor.web3.SystemProgram.createAccount({\r\n            fromPubkey: payer,\r\n            newAccountPubkey: mint.publicKey,\r\n            space: MintLayout.span,\r\n            lamports:\r\n                await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n                    MintLayout.span,\r\n                ),\r\n            programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            mint.publicKey,\r\n            0,\r\n            payer,\r\n            payer,\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n            userTokenAccountAddress,\r\n            payer,\r\n            payer,\r\n            mint.publicKey,\r\n        ),\r\n        Token.createMintToInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            mint.publicKey,\r\n            userTokenAccountAddress,\r\n            payer,\r\n            [],\r\n            1,\r\n        ),\r\n    ];\r\n\r\n    return {\r\n        mint: mint,\r\n        userTokenAccount: userTokenAccountAddress,\r\n        transaction: (\r\n            await sendTransactions(\r\n                candyMachine.program.provider.connection,\r\n                candyMachine.program.provider.wallet,\r\n                [instructions],\r\n                [signers],\r\n                SequenceType.StopOnFailure,\r\n                'singleGossip',\r\n                () => {},\r\n                () => false,\r\n                undefined,\r\n                [],\r\n                [],\r\n            )\r\n        ).txs[0].txid,\r\n    };\r\n};\r\n\r\ntype MintResult = {\r\n    mintTxId: string;\r\n    metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n    candyMachine: CandyMachineAccount,\r\n    payer: anchor.web3.PublicKey,\r\n    mint: anchor.web3.Keypair,\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n    setupState?: SetupState,\r\n): Promise<MintResult | null> => {\r\n    const userTokenAccountAddress = (\r\n        await getAtaForMint(mint.publicKey, payer)\r\n    )[0];\r\n\r\n    const userPayingAccountAddress = candyMachine.state.tokenMint\r\n        ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n        : payer;\r\n\r\n    const candyMachineAddress = candyMachine.id;\r\n    const remainingAccounts = [];\r\n    const instructions = [];\r\n    const signers: anchor.web3.Keypair[] = [];\r\n    console.log('SetupState: ', setupState);\r\n    if (!setupState) {\r\n        signers.push(mint);\r\n        instructions.push(\r\n            ...[\r\n                anchor.web3.SystemProgram.createAccount({\r\n                    fromPubkey: payer,\r\n                    newAccountPubkey: mint.publicKey,\r\n                    space: MintLayout.span,\r\n                    lamports:\r\n                        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n                            MintLayout.span,\r\n                        ),\r\n                    programId: TOKEN_PROGRAM_ID,\r\n                }),\r\n                Token.createInitMintInstruction(\r\n                    TOKEN_PROGRAM_ID,\r\n                    mint.publicKey,\r\n                    0,\r\n                    payer,\r\n                    payer,\r\n                ),\r\n                createAssociatedTokenAccountInstruction(\r\n                    userTokenAccountAddress,\r\n                    payer,\r\n                    payer,\r\n                    mint.publicKey,\r\n                ),\r\n                Token.createMintToInstruction(\r\n                    TOKEN_PROGRAM_ID,\r\n                    mint.publicKey,\r\n                    userTokenAccountAddress,\r\n                    payer,\r\n                    [],\r\n                    1,\r\n                ),\r\n            ],\r\n        );\r\n    }\r\n\r\n    if (candyMachine.state.gatekeeper) {\r\n        remainingAccounts.push({\r\n            pubkey: (\r\n                await getNetworkToken(\r\n                    payer,\r\n                    candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                )\r\n            )[0],\r\n            isWritable: true,\r\n            isSigner: false,\r\n        });\r\n\r\n        if (candyMachine.state.gatekeeper.expireOnUse) {\r\n            remainingAccounts.push({\r\n                pubkey: CIVIC,\r\n                isWritable: false,\r\n                isSigner: false,\r\n            });\r\n            remainingAccounts.push({\r\n                pubkey: (\r\n                    await getNetworkExpire(\r\n                        candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                    )\r\n                )[0],\r\n                isWritable: false,\r\n                isSigner: false,\r\n            });\r\n        }\r\n    }\r\n    if (candyMachine.state.whitelistMintSettings) {\r\n        const mint = new anchor.web3.PublicKey(\r\n            candyMachine.state.whitelistMintSettings.mint,\r\n        );\r\n\r\n        const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n        remainingAccounts.push({\r\n            pubkey: whitelistToken,\r\n            isWritable: true,\r\n            isSigner: false,\r\n        });\r\n\r\n        if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n            remainingAccounts.push({\r\n                pubkey: mint,\r\n                isWritable: true,\r\n                isSigner: false,\r\n            });\r\n            remainingAccounts.push({\r\n                pubkey: payer,\r\n                isWritable: false,\r\n                isSigner: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    if (candyMachine.state.tokenMint) {\r\n        remainingAccounts.push({\r\n            pubkey: userPayingAccountAddress,\r\n            isWritable: true,\r\n            isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n            pubkey: payer,\r\n            isWritable: false,\r\n            isSigner: true,\r\n        });\r\n    }\r\n    const metadataAddress = await getMetadata(mint.publicKey);\r\n    const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n        candyMachineAddress,\r\n    );\r\n\r\n    console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\r\n    instructions.push(\r\n        await candyMachine.program.instruction.mintNft(creatorBump, {\r\n            accounts: {\r\n                candyMachine: candyMachineAddress,\r\n                candyMachineCreator,\r\n                payer: payer,\r\n                wallet: candyMachine.state.treasury,\r\n                mint: mint.publicKey,\r\n                metadata: metadataAddress,\r\n                masterEdition,\r\n                mintAuthority: payer,\r\n                updateAuthority: payer,\r\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n                tokenProgram: TOKEN_PROGRAM_ID,\r\n                systemProgram: SystemProgram.programId,\r\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n                clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n                recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n                instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n            },\r\n            remainingAccounts:\r\n                remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n        }),\r\n    );\r\n\r\n    const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n    const collectionPDAAccount =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n            collectionPDA,\r\n        );\r\n\r\n    if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n        try {\r\n            const collectionData =\r\n                (await candyMachine.program.account.collectionPda.fetch(\r\n                    collectionPDA,\r\n                )) as CollectionData;\r\n            console.log(collectionData);\r\n            const collectionMint = collectionData.mint;\r\n            const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n                collectionMint,\r\n                collectionPDA,\r\n            );\r\n            console.log(collectionMint);\r\n            if (collectionMint) {\r\n                const collectionMetadata = await getMetadata(collectionMint);\r\n                const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n                console.log('Collection PDA: ', collectionPDA.toBase58());\r\n                console.log('Authority: ', candyMachine.state.authority.toBase58());\r\n                instructions.push(\r\n                    await candyMachine.program.instruction.setCollectionDuringMint({\r\n                        accounts: {\r\n                            candyMachine: candyMachineAddress,\r\n                            metadata: metadataAddress,\r\n                            payer: payer,\r\n                            collectionPda: collectionPDA,\r\n                            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n                            instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n                            collectionMint,\r\n                            collectionMetadata,\r\n                            collectionMasterEdition,\r\n                            authority: candyMachine.state.authority,\r\n                            collectionAuthorityRecord,\r\n                        },\r\n                    }),\r\n                );\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const instructionsMatrix = [instructions];\r\n    const signersMatrix = [signers];\r\n\r\n    try {\r\n        const txns = (\r\n            await sendTransactions(\r\n                candyMachine.program.provider.connection,\r\n                candyMachine.program.provider.wallet,\r\n                instructionsMatrix,\r\n                signersMatrix,\r\n                SequenceType.StopOnFailure,\r\n                'singleGossip',\r\n                () => {},\r\n                () => false,\r\n                undefined,\r\n                beforeTransactions,\r\n                afterTransactions,\r\n            )\r\n        ).txs.map(t => t.txid);\r\n        const mintTxn = txns[0];\r\n        return {\r\n            mintTxId: mintTxn,\r\n            metadataKey: metadataAddress,\r\n        };\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n    connection: Connection,\r\n    txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[][],\r\n    signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n            connection,\r\n            wallet,\r\n            instructions[0],\r\n            filteredSigners[0],\r\n            'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n            connection,\r\n            wallet,\r\n            instructions,\r\n            filteredSigners,\r\n            SequenceType.StopOnFailure,\r\n            'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n        'Died on ',\r\n        stopPoint,\r\n        'retrying from instruction',\r\n        instructions[stopPoint],\r\n        'instructions length is',\r\n        instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructionSet: TransactionInstruction[][],\r\n    signersSet: Keypair[][],\r\n    sequenceType: SequenceType = SequenceType.Parallel,\r\n    commitment: Commitment = 'singleGossip',\r\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n      partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n      'Signed txns length',\r\n      signedTxns.length,\r\n      'vs handed in length',\r\n      instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n            successCallback(txid, i),\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Failed at txn index:', i);\r\n        console.log('Caught failure:', e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[] | Transaction,\r\n    signers: Keypair[],\r\n    awaitConfirmation = true,\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (instructions instanceof Transaction) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n        block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n          // fee payed by the wallet owner\r\n          wallet.publicKey,\r\n          ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        DEFAULT_TIMEOUT,\r\n        connection,\r\n        commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n                                              signedTransaction,\r\n                                              connection,\r\n                                              timeout = DEFAULT_TIMEOUT,\r\n                                            }: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n      rawTransaction,\r\n      {\r\n        skipPreflight: true,\r\n      },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        timeout,\r\n        connection,\r\n        'recent',\r\n        true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n          await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n                'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n    connection: Connection,\r\n    transaction: Transaction,\r\n    commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n      // @ts-ignore\r\n      connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n    txid: TransactionSignature,\r\n    timeout: number,\r\n    connection: Connection,\r\n    commitment: Commitment = 'recent',\r\n    queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n          txid,\r\n          (result, context) => {\r\n            done = true;\r\n            status = {\r\n              err: result.err,\r\n              slot: context.slot,\r\n              confirmations: 0,\r\n            };\r\n            if (result.err) {\r\n              console.log('Rejected via websocket', result.err);\r\n              reject(status);\r\n            } else {\r\n              console.log('Resolved via websocket', result);\r\n              resolve(status);\r\n            }\r\n          },\r\n          commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}